version: '3.8'

services:
  loadbalancer:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: loadbalancer
    ports:
      - "8080:8080"
    depends_on:
      - redis
      - backend1
      - backend2
      - backend3
    environment:
      - LB_SERVER_PORT=8080
      - LB_RATE_LIMIT_REDIS_ADDR=redis:6379
      - LB_LOGGING_LEVEL=info
    volumes:
      - ./config:/app/config
      - ./logs:/app/logs
    restart: unless-stopped
    networks:
      - loadbalancer-network

  redis:
    image: redis:alpine
    container_name: loadbalancer-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    restart: unless-stopped
    networks:
      - loadbalancer-network
    command: redis-server --appendonly yes

  # Тестовые бэкенд-сервера (для демонстрации)
  backend1:
    image: nginx:alpine
    container_name: backend1
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
    networks:
      - loadbalancer-network
    environment:
      - BACKEND_ID=backend1
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:80/health"]
      interval: 10s
      timeout: 5s
      retries: 3

  backend2:
    image: nginx:alpine
    container_name: backend2
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
    networks:
      - loadbalancer-network
    environment:
      - BACKEND_ID=backend2
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:80/health"]
      interval: 10s
      timeout: 5s
      retries: 3

  backend3:
    image: nginx:alpine
    container_name: backend3
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
    networks:
      - loadbalancer-network
    environment:
      - BACKEND_ID=backend3
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:80/health"]
      interval: 10s
      timeout: 5s
      retries: 3

networks:
  loadbalancer-network:
    driver: bridge

volumes:
  redis-data: